####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: https://mirrors.slickstack.io/modules/nginx/sites/multisite-subdomains.txt ############
#### path: n/a (boilerplate) #######################################################################
#### destination: /var/www/sites/production (after install) ########################################
#### purpose: Nginx server block boilerplate optimized for SlickStack Multisite (subdomains) #######
#### module version: Nginx 1.18.x ##################################################################
#### sourced by: nginx.conf ########################################################################
#### bash aliases: n/a (ss-install-nginx-config) ###################################################
####################################################################################################

## SLICKSTACK SUPPORTS HTTPS-ONLY NGINX SERVER BLOCKS WITH HSTS ENABLED BY DEFAULT ##
## WORDPRESS MULTISITE INSTALLATIONS DO NOT SUPPORT STAGING/DEV SERVER BLOCKS ##

####################################################################################################
#### TABLE OF CONTENTS (Server Block: Multisite Subdomains) ########################################
####################################################################################################

## A. Multiple Domains Or Subdomains
## B. Well-Known (Domain Verification)
## C. Redirect Any AMP Requests
## D. Redirect Junk URLs

####################################################################################################
#### A. Server Block (Multisite Subdomains): Multiple Domains Or Subdomains ########################
####################################################################################################

## CloudFlare ignores HTTP/2 from origin server but we enable in case of Lets Encrypt ##
## because SlickStack is HTTPS-only the canonical block is port 443 (SSL) only ##

server {
	listen 443 ssl http2;
 	listen [::]:443 ssl http2;
	server_name	*.@SITE_DOMAIN_EXCLUDING_WWW @SITE_ROOT_DOMAIN;
	root /var/www/html;

	## domain mapping ##
	server_name_in_redirect off;

####################################################################################################
#### B. Server Block (Multisite Subdomains): Well-Known (Domain Verification) ######################
####################################################################################################

## the well-known hidden directory is becoming more important for domain verification ##
## we implement an abundance of rules to improve functionality and stability ##

location ^~ /.well-known/ {
	allow all;
	auth_basic off;
	default_type "text/plain";
	try_files $uri =404;
}

####################################################################################################
#### C. Server Block (Multisite Subdomains): Redirect Any AMP Requests #############################
####################################################################################################

## this powerful snippet will redirect all the messy URLs created by AMP software ##
## SlickStack does not support AMP for both stability and political reasons ##

## redirect /amp queries ##
rewrite ^(.*/)amp(.*)$ $1 permanent;
	
## redirect ?amp queries ##
if ($query_string ~ "^amp(.*)$") {
	rewrite ^(.*)$ $uri? permanent;
}

####################################################################################################
#### D. Server Block (Multisite Subdomains): Redirect Other Junk Query Strings #######################################
####################################################################################################

## redirect /?attachment_id=xxx queries ##
if ($query_string ~ "^attachment_id(.*)$") {
	rewrite ^(.*)$ $uri? permanent;
}

## redirect ?format queries ##
if ($query_string ~ "^format(.*)$") {
        rewrite ^(.*)$ $uri? permanent;
}

## redirect ?lightbox queries ##
if ($query_string ~ "^lightbox(.*)$") {
        rewrite ^(.*)$ $uri? permanent;
}

## noindex ?s= queries ##
## this addresses an apparent bug in WP core / WooCommerce where complex search queries are missing the noindex metatag ##
## e.g. /?s=shirt&post_type=product is missing it causing mass amount of GSC errors like: Duplicate without user-selected canonical ##

if ($query_string ~ "^s=(.*)$") {
        set $robots "noindex, nofollow, nosnippet, noarchive";
}

####################################################################################################
#### D. Server Block (Multisite Subdomains): Redirect Junk URLs ####################################
####################################################################################################

## redirect /home/ ##
rewrite ^/home/?$ $1 permanent;

## redirect /homepage/ ##
rewrite ^/homepage/?$ $1 permanent;

## trackback ##
rewrite ^(.*)/trackback/?$ $1 permanent;

## send to parent /feed/ ##
rewrite ^/(.*)/atom/?$ /$1 permanent;

## send to parent /feed/ ##
rewrite ^/(.*)/rss2/?$ /$1 permanent;

## comments feeds base ##
rewrite ^(.*/)comments/?$ $1 permanent;

## feed (preserve master feed) ##
location = /feed/?$ {
        try_files $uri $uri/ /index.php?$args;
        set $robots "noindex, nofollow, nosnippet, noarchive";
}

## redirect feeds besides bbpress topics feed ##
## needs better optimization as currently this preserves page feeds with slugs that begin with /topics... ##
location ~ ^/(?!topics).*/feed/?$ {
        rewrite ^/(.*)/feed/?$ /$1 permanent;
}

####################################################################################################
#### Server Block: WordPress Multisite Various Settings ############################################
####################################################################################################

## Multisite has some unique security and performance concerns that are addressed below ##
## lots of outdated code snippets floating around online but should be current ##

## NOTE: need to review the blogid map that rtCamp popularized ##
    
    ## location ^~ /files/ {
    ##    rewrite ^.*/files/(.+)$ /wp-includes/ms-files.php?file=$1 last;
    ## }
    ## location ~ ^/files/(.*)$ {
    ##     try_files /wp-content/blogs.dir/$blogid/$uri /wp-includes/ms-files.php?file=$1 ;
    ## }
    
    ## pass uploaded files to ms-files.php ##
    rewrite /files/$ /index.php last;
    
    if ($uri !~ wp-content/plugins) {
        rewrite /files/(.+)$ /wp-includes/ms-files.php?file=$1 last;
    }
    
    ## Rewrite multisite '.../wp-.*' and '.../*.php' ##
    if (!-e $request_filename) {
        rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
        rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
	## not required if wp-admin trailing slash rule already implemented ##
	# rewrite ^/[_0-9a-zA-Z-]+.*(/wp-admin/.*\.php)$ $1 last;
	# rewrite /wp-admin$ $scheme://$host$uri/ permanent;
    }
    
    ## avoid php readfile() using x-sendfile ##
    location ^~ /blogs.dir {
        internal;
        alias /var/www/html/wp-content/blogs.dir;
    }
 
####################################################################################################
#### Server Block: File Uploads Settings ###########################################################
####################################################################################################

    # Deny access to any files with a .php extension in the uploads directory
    # Works in sub-directory installs and also in multisite network
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }
    
    # deny running scripts inside writable directories
    # location ~* /(images|cache|media|logs|tmp)/.*\.(php|pl|py|jsp|asp|sh|cgi)$ {
    #     deny all;
    # }

####################################################################################################
#### Server Block (Multisite Subdomains): Root Location Block ######################################
####################################################################################################

## below is the main location block that applies to pretty much the entire website ##
## this includes site-wide rules for security, maintenance, and other purposes ##

## force trailing slash on */wp-admin requests ##
rewrite /wp-admin$ https://$host$uri/ permanent;
		
location / {

## first try files, then directories, otherwise query index.php ##
try_files $uri $uri/ /index.php?$args;
	
## THIS SNIPPET IS BREAKING TRACKING QUERIES SUCH AS /?ref=google&utm_source= ##
## redirect index.php to root ##
# if ($request_uri ~* "^(.*/)index\.php$") {
#	return 301 $1;
# }

## 503 error if maintenance file found in web root ##
if (-f /var/www/html/maintenance.html) {
	return 503;
}
	
## force trailing slashes on urls (do not enable for bbPress/BuddyPress sites) ##
# rewrite ^([^.]*[^/])$ $1/ permanent;
	
## block user enumeration ##
if ( $query_string ~ "author=([0-9]*)" ) { 
	return 403;
}

}

####################################################################################################
#### Server Block (Multisite Subdomains): Noindex Thin Content (Regex) #############################
####################################################################################################

## these are very powerful rules that force-noindex thin content for huge SEO results ##
## in this way your clients, plugins, or WP themes cannot mess up your indexing ##

## pagination ##
location ~ ^(.*)/page/(.*)/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## tags ##
location ~ ^(.*)/tag/(.*)/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## date archives ##
location ~ "^(.*)/[0-9]{4}/([0-9]{2}/)?([0-9]{2}/)?$" {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## embed subdirs (bbpress) ##
location ~ ^(.*)/embed/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## reply sublinks (bbpress) ##
location ~ ^(.*)/reply/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

####################################################################################################
#### Server Block (Multisite Subdomains): Noindex Certain File Types ###############################
####################################################################################################

## these powerful rules force-noindex non-WordPress file types for cleaner SEO results ##
## in this way malware or spam attacks or forgotten files are hidden from SERPs ##

## allowed: htm, html, xml (also css, js, php, etc)
## Ref: https://support.google.com/webmasters/answer/35287?hl=en

location ~* \.(asp|aspx|doc|docx|dwf|gpx|hwp|jsp|kml|kmz|log|odp|ods|odt|pdf|ppt|pptx|ps|rtf|tex|text|txt|wap|wml|xls|xlsx)$ {
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

####################################################################################################

####################################################################################################

## fixes potential 403 denied issues with WP-JSON ##
location ~ ^/wp-json/ {
	## if permalinks not enabled or not loaded properly in the browser ##
	rewrite ^/wp-json/(.*?)$ /?rest_route=/$1 last;
}

####################################################################################################
#### Server Block (Multisite Subdomains): FastCGI Cache Settings ###################################
####################################################################################################

## several common patterns are configured to skip FastCGI caching to avoid conflicts ##
## ensure your site uses correct URL spellings e.g. /cart and /checkout (etc) ##

    ## set to either 1/0 to skip fastcgi cache by default ##
    set $skip_cache @FCGI_CACHE;
    
    ## post requests should always skip the cache
    if ($request_method = POST) {
        set $skip_cache 1;
    }
    
    ## query strings should always skip the cache
    if ($query_string != "") {
        set $skip_cache 1;
    }
    
    ## ENGLISH - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/account.*|/cart.*|/checkout.*|/contact.*|/dashboard.*|/login.*|/my-.*|/order.*|/profile.*|/register.*|/settings.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
        set $skip_cache 1;
    }

    ## GERMAN - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/konto.*|/warenkorb.*|/kasse.*|/kontakt.*|/dashboard.*|/anmelden.*|/mein-.*|/bestellung.*|/profil.*|/registrieren.*|/einstellungen.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
        set $skip_cache 1;
    }
    
    ## POLISH - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/konto.*|/koszyk.*|/zamowienie.*|/kontakt.*|/dashboard.*|/login.*|/moje-.*|/zamowienie.*|/profil.*|/register.*|/ustawienia.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
    	set $skip_cache 1;
    }
    
    ## do not cache RSS feeds or sitemaps (special 5 minute cache rule or something would be better in the future) ##
    if ($request_uri ~* "/feed/|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }
    
    ## certain cookies (logged in users or recent commenters etc) should always skip the cache
    if ($http_cookie ~* "wordpress_logged_in|wp-postpass|woocommerce_items_in_cart|woocommerce_cart_hash|comment_author") {
        set $skip_cache 1;
    }
    
    ## woocommerce cart actions should always skip the cache
    # if ($arg_add-to-cart != "") {
    #    set $skip_cache 1;
    # }
    
    ## woocommerce shoppers should always skip the cache
    # if ($http_cookie ~* "cookie_woocommerce_items_in_cart") {
    #    set $skip_cache 1;
    # }
    
    ## woocommerce shoppers should always skip the cache
    # if ($cookie_woocommerce_items_in_cart != "0") {
    #    set $skip_cache 1;
    # }

####################################################################################################
#### Server Block (Multisite Subdomains): PHP-FPM Routing ##########################################
####################################################################################################

## here are the critical settings that allow Nginx and PHP to work together via FCGI ##
## we also have to optimize cookies here too since working with WordPress ##

location ~* \.php$ {

limit_req zone=php_second burst=@LIMIT_REQUESTS_PHP_SECOND_BURST nodelay;
limit_req zone=php_minute burst=@LIMIT_REQUESTS_PHP_MINUTE_BURST nodelay;

## default session is blank and cookie is secure ##
set $ss_session "";
set $setcookie "Path=/; HttpOnly; Secure";

## unique session (cookie suffix) after users interact with woocommerce ##
if ($http_cookie ~* "wp_woocommerce_session_[^=]*=([^%]+)%7C") {
        set $ss_session wp_woocommerce_session_$1;
}

## blank session and strip cookie header if cached page ##
if ($skip_cache = 0 ) {
        set $ss_session "";
        more_clear_headers "Set-Cookie*";
}

## send .php requests to WordPress for error handling if not found ##
try_files $uri $uri/ /index.php?$args;

## fastcgi stuff ##
include /etc/nginx/fastcgi.conf;
fastcgi_split_path_info ^(.+\.php)(/.+)$;
fastcgi_pass 127.0.0.1:9000;
fastcgi_read_timeout 300;
fastcgi_index index.php;
fastcgi_cache WORDPRESS;
fastcgi_cache_valid 200 301 404 1440m;
fastcgi_cache_bypass $skip_cache;
fastcgi_no_cache $skip_cache;

## universal robots header ##
more_set_headers "X-Robots-Tag $robots";

## disable browser cache ##
set $cachecontrol "nocache";
}

####################################################################################################
#### Server Block (Multisite Subdomains): Rate Limit WP-Login.php ##################################
####################################################################################################

## because of goofy Nginx we must reinclude all PHP directives here as they exist above ##
## next we enable rate-limiting to prevent automated brute force hack attempts ##

location = /wp-login.php {

limit_req zone=wplogin_second burst=@LIMIT_REQUESTS_WPLOGIN_SECOND_BURST nodelay;
limit_req zone=wplogin_minute burst=@LIMIT_REQUESTS_WPLOGIN_MINUTE_BURST nodelay;

	include /etc/nginx/fastcgi.conf;
	try_files $uri =404;
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	fastcgi_pass 127.0.0.1:9000;
	fastcgi_read_timeout 300;
	fastcgi_index index.php;
	fastcgi_cache WORDPRESS;
	fastcgi_cache_valid 200 301 404 @CACHEVALID;
	fastcgi_cache_bypass $skip_cache;
	fastcgi_no_cache $skip_cache;
}

####################################################################################################
#### Server Block (Multisite Subdomains): Adminer Script ###########################################
####################################################################################################

## this snippet allows you to load Adminer via the frontend (requires PHP-FPM routing) ##
## we include some basic rate limiting rules to avoid attacks on these URLs ##

location ^~ /adminer {
	limit_req zone=adminer burst=1 nodelay;
	alias /var/www/meta/adminer.php;
	include /etc/nginx/fastcgi.conf;
	try_files $uri =404;
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	fastcgi_pass 127.0.0.1:9000;
	fastcgi_read_timeout 300;
	fastcgi_index index.php;
	fastcgi_cache off;
}

####################################################################################################
#### Server Block (Multisite Subdomains): Staging/Dev Subdirectories ###############################
####################################################################################################

## for security reasons the dev and staging sudirectories are redirected to subdomains ##
## therefore any staging WordPress plugins cannot use these reserved paths ##

location /staging/ {
	return 301 https://@SITE_FULL_DOMAIN;
}

location /dev/ {
	return 301 https://@SITE_FULL_DOMAIN;
}

####################################################################################################
#### K. Server Block (Multisite Subdomains): HTML Files ############################################
####################################################################################################

## because some websites mix WordPress with other static .html files we include this ##
## in case .html files are missing they will be redirected to WordPress here ##

location ~* \.(htm|html)$ {
	try_files $uri $uri/ /index.php?$args;
	set $cachecontrol "public, max-age=691200"; ## 1 week
	set $setcookie "";
}

####################################################################################################
#### Server Block (Multisite Subdomains): Static Files #############################################
####################################################################################################

## this snippet controls expiration headers and any other settings for static assets ##
## keep in mind that Cloudflare or CDNs will likely overwrite these settings ##

location ~* \.(atom|bmp|bz2|doc|docx|gif|gz|ico|jpeg|jpg|mid|midi|mp4|ogg|ogv|png|ppt|rar|rss|rtf|svgz|tar|tgz|wav|webp|xls|zip)$ {
	set $cachecontrol "public, max-age=15778476"; ## 6 months
	set $setcookie "";
}

####################################################################################################
#### Server Block (Multisite Subdomains): Browser Asset Rendering ##################################
####################################################################################################

## avoids render security errors for cross-origin in certain browsers e.g. Firefox/IE ##
## this pretty much tells browsers to stop being paranoid and load your fonts ##

####### AVOIDS MATCHING MULTIPLE LOCATION BLOCKS ###########

location ~* \.(css|eot|js|otf|svg|ttc|ttf|woff|woff2)$ {
	set $cachecontrol "public, max-age=15778476"; ## 6 months
	set $setcookie "";
	add_header Access-Control-Allow-Origin "*";
	# try_files $uri @redirect;
}

## stupid idea lets disable for now ##
# location @redirect {
#	return 302 https://@SITE_FULL_DOMAIN;
# }

####################################################################################################
#### Server Block (Multisite Subdomains): Favicon Files ############################################
####################################################################################################

## the favicon file is annoying and old-fashioned but still something we must optimize ##
## issuing a 204 error is better (and faster) than a 404 error if not found ##

location = /favicon.ico {
	try_files $uri =204;
}

####################################################################################################
#### Server Block (Multisite Subdomains): Physical or Virtual Robots.txt ###########################
####################################################################################################

## messing up robots.txt rules is one of the most common issues with WordPress sites ##
## in most cases it should be near-empty (noindex meta tags usually better) ##

location = /robots.txt {
	try_files $uri $uri/ /index.php?$args;
	allow all;
}

####################################################################################################
#### Server Block (Multisite Subdomains): Physical or Virtual Ads.txt ##############################
####################################################################################################

## just like robots.txt the ads.txt file can be generated using WordPress plugins ##
## virtual ones can be easier to manage/migrate but also more code bloat ##

location = /ads.txt {
	try_files $uri $uri/ /index.php?$args;
	allow all;
}

####################################################################################################
#### Server Block: Git Configuration Settings ######################################################
####################################################################################################

    location = /.git/config {
        deny all;
    }
    
####################################################################################################
#### Server Block: Deny Access To Various (Unsafe + Unused) WordPress Core Files ###################
####################################################################################################




####################################################################################################
#### Server Block: Deny Access To Various (Unsafe + Unused) WordPress Core Files ###################
####################################################################################################

    ## WP directories ##
    location ~* /(?:wp-includes|wp-content|mu-plugins|uploads)/.*\.php$ {
        deny all;
    }
    
    ## WP meta files ##
    location ~* (license|licence|readme)\.(htm|html|txt) {
	deny all;
    }
    
    ## wp-admin concatenation ##
    location = /wp-admin/load-scripts.php {
        deny all;
    }
    
    ## wp-admin concatenation ##
    location = /wp-admin/load-styles.php {
        deny all;
    }
    
    ## wp-config ##
    location ~ /wp-config*.php {
	deny all;
    }
    
    ## XML-RPC ##
    location = /xmlrpc.php {
	deny all;
    }
    
    ## wp-mail ##
    location = /wp-mail.php {
	deny all;
    }
    
    ## wp-links-opml ##
    location = /wp-links-opml.php {
	deny all;
    }
    
    ## wp-trackback ##
    location = /wp-trackback.php {
	deny all;
    }
    
    ## WP debug logs ##
    location ~ /wp-content/debug\.log {
	deny all;
    }
	
####################################################################################################
#### R. Server Block (Production): Deny Access To Unsafe SlickStack Files ##########################
####################################################################################################

## here we deny frontend access to certain sensitive files that are part of SlickStack ##
## this provides extra security and prevents snooping into your configuration ##

    ## object-cache.php ##
    location = /wp-content/object-cache.php {
	deny all;
    }
    
    ## blacklist.txt ##
    location = /wp-content/blacklist.txt {
	deny all;
    }
    
    ## functions.php ##
    location = /wp-content/functions.php {
	deny all;
    }
    
    ## xxx-common.php ##
    location = /wp-content/mu-plugins/xxx-common.php {
	deny all;
    }

####################################################################################################
#### Server Block (Production): Deny Access To WordPress Installer #################################
####################################################################################################
    
## SlickStack blocks access to the staging WordPress installer to avoid hacking etc ##
## staging sites should populate their data using ss-sync-staging only ##
    
    ## block install script ##
    location = /wp-admin/install.php {
    	deny all;
    }
	
####################################################################################################
#### Server Block: Custom Settings For Popular Third-Party WordPress Plugins #######################
####################################################################################################
    
    ## Easy Digital Downloads ##
    location ~ ^/wp-content/uploads/edd/(.*?)\.zip$ {
        rewrite / permanent;
    }
    
####################################################################################################
#### Server Block (Production): Maintenance File (Named Location) ##################################
####################################################################################################

  ## activate named @maintenance location for any 503 errors ##
  error_page 503 @maintenance;
  
  ## location rules for maintenance.html ##
  location @maintenance {
       rewrite ^(.*)$ /maintenance.html break;
  }
    
    
## DO NOT REMOVE THIS CURLY BRACKET ᕦ⊙෴⊙ᕤ ##
}

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://wordpress.org/support/article/nginx/
## Ref: https://computingforgeeks.com/how-to-setup-wordpress-multisite-network-nginx-letsencrypt/
## Ref: https://easyengine.io/wordpress-nginx/tutorials/multisite/subdomains/minimal/
## Ref: https://easyengine.io/wordpress-nginx/tutorials/multisite/subdomains/minimal/#comment-42709
## Ref: https://easyengine.io/wordpress-nginx/tutorials/multisite/subdirectories/minimal/
## Ref: https://premium.wpmudev.org/blog/wordpress-multisite-wordpress-nginx/
## Ref: https://stackoverflow.com/questions/21687288/nginx-redirect-loop-remove-index-php-from-url/21813759#21813759
## Ref: https://wordpress.org/plugins/wordpress-mu-domain-mapping/
## Ref: https://stackoverflow.com/questions/4833238/nginx-conf-redirect-multiple-conditions/45504231#45504231
## Ref: https://gist.github.com/evansolomon/2274120
## Ref: https://premium.wpmudev.org/blog/wordpress-multisite-wordpress-nginx/
## Ref: https://serverfault.com/questions/578648/properly-setting-up-a-default-nginx-server-for-https
## Ref: https://stackoverflow.com/questions/6246490/wordpress-subdomain-multisite-nginx-media-library
## Ref: https://gist.github.com/centminmod/9034414
## Ref: https://stackoverflow.com/questions/29123222/wordpress-multisite-directory-nginx-config
## Ref: https://premium.wpmudev.org/forums/topic/ssl-on-domain-mapping-with-wp-multisite/
## Ref: https://core.trac.wordpress.org/ticket/18852
## Ref: https://github.com/bradp/vv/issues/355
## Ref: https://github.com/roots/wordpress-nginx/blob/master/templates/default/wordpress-common.erb
## Ref: https://snippets.cacher.io/snippet/797464509dbb045262f4
## Ref: https://forum.nginx.org/read.php?9,219980
## Ref: https://wordpress.org/support/topic/wp-multisite-404-not-found-error/
## Ref: https://wpmudev.com/blog/wordpress-multisite-wordpress-nginx/
## Ref: https://easyengine.io/wordpress-nginx/tutorials/multisite/subdomains/minimal/
## Ref: https://www.ruby-forum.com/t/question-on-server-name-in-redirect/193836
## Ref: https://w10schools.com/posts/237736_server_name_in_redirect

## SS_EOF
