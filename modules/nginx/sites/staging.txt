####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: littlebizzy/slickstack/blob/master/modules/nginx/sites/staging.txt ####################
#### path: n/a (boilerplate) #######################################################################
#### destination: /var/www/sites/staging.conf (after install) ######################################
#### purpose: Nginx server block boilerplate optimized for SlickStack staging sites ################
#### module version: Nginx 1.18.x ##################################################################
#### sourced by: nginx.conf ########################################################################
#### bash aliases: n/a (ss-install-nginx-config) ###################################################
####################################################################################################

## SLICKSTACK SUPPORTS HTTPS-ONLY NGINX SERVER BLOCKS WITH HSTS ENABLED BY DEFAULT ##
## PRODUCTION, STAGING, AND DEV SITES EACH HAVE SEPARATE NGINX SERVER BLOCKS ##

####################################################################################################
#### TABLE OF CONTENTS (Server Block: Staging) #####################################################
####################################################################################################

## this is a brief summary of the different code snippets you will find in this script ##
## each section should be commented so you understand what is being accomplished ##

## A. Canonical Subdomain (Single Website)
## B. Share Production Media Uploads
## C. Error Pages
## D. Well-Known Directory
## E. Redirect AMP Requests


#### for Certbot only ##
server {
    listen 80;
	listen [::]:80;
    server_name staging.@SITE_DOMAIN_EXCLUDING_WWW;
	return 301 https://staging.@SITE_DOMAIN_EXCLUDING_WWW$request_uri;
}

####################################################################################################
#### A. Server Block (Staging): Canonical Subdomain (Single Website) ###############################
####################################################################################################

## CloudFlare ignores HTTP/2 from origin server but we enable in case of Lets Encrypt ##
## because SlickStack is HTTPS-only the canonical block is port 443 (SSL) only ##

server {

listen 443 ssl http2;
listen [::]:443 ssl http2;
server_name staging.@SITE_DOMAIN_EXCLUDING_WWW;
root /var/www/html/staging;
auth_basic "Restricted Content";
auth_basic_user_file /var/www/meta/.htpasswd;
more_set_headers "X-Robots-Tag noindex, nofollow, nosnippet, noarchive";

####################################################################################################
#### B. Server Block (Staging): Share Production Media Uploads #####################################
####################################################################################################

## this little Nginx magic allows your staging site to share Media files from production ##
## it saves tremendous disk space and makes syncing staging sites a lot faster ##

location ^~ /wp-content/uploads/ {
	alias /var/www/html/wp-content/uploads/;
}

####################################################################################################
#### C. Server Block (Staging): Error Pages ########################################################
####################################################################################################

error_page 404 /error_404.html;
	location = /error_404.html {
        root /var/www/sites/error_pages;
        internal;
    }

 error_page 500 502 503 504 /error_50x.html;
    location = /error_50x.html {
        root /var/www/sites/error_pages;
        internal;
    }

####################################################################################################
#### D. Server Block (Staging): Well-Known Directory ###############################################
####################################################################################################

## the well-known hidden directory is becoming more important for domain verification ##
## we implement an abundance of rules to improve functionality and stability ##

location ^~ /.well-known/ {
	allow all;
	auth_basic off;
	default_type "text/plain";
	try_files $uri =404;
	
	## share directory from production ##
	alias /var/www/html/.well-known/;
}

####################################################################################################
#### D. Server Block (Staging): Redirect AMP Requests ##############################################
####################################################################################################

## this powerful snippet will redirect all the messy URLs created by AMP software ##
## SlickStack does not support AMP for both stability and political reasons ##

## redirect /amp queries ##
rewrite ^(.*/)amp(.*)$ $1 permanent;
	
## redirect ?amp queries ##
if ($query_string ~ "^amp(.*)$") {
	rewrite ^(.*)$ $uri? permanent;
}

####################################################################################################
#### Server Block (Staging): Indexing + Public URI + Try Files Settings ############################
####################################################################################################

	## THIS SNIPPET IS BREAKING TRACKING QUERIES SUCH AS /?ref=google&utm_source= ##
	## redirect index.php to root ##
	# if ($request_uri ~* "^(.*/)index\.php$") {
	#	return 301 $1;
	# }
    
    ## force trailing slash on */wp-admin requests ##
    rewrite /wp-admin$ https://$host$uri/ permanent;
    
    ## try files order ##
    location / {
        ## first try files, then directories, otherwise query index
        try_files $uri $uri/ /index.php?$args;
	## force trailing slashes on urls (do not enable for bbPress/BuddyPress sites)
        # rewrite ^([^.]*[^/])$ $1/ permanent;
    }
    
    ## hidden files (block access) ##
    location ~ /\. {
        ## do not enable if using Certbot, Git, etc ##
	# deny all;
    }
    
    ## fixes potential 403 denied issues with WP-JSON ##
    location ~ ^/wp-json/ {
        ## if permalinks not enabled or not loaded properly in the browser ##
        rewrite ^/wp-json/(.*?)$ /?rest_route=/$1 last;
    }

####################################################################################################
#### Server Block (Staging): FastCGI Cache Settings ################################################
####################################################################################################

## several common URI patterns are configured to skip FastCGI caching to avoid conflicts ##
## ensure your site follows correct URI spelling e.g. /cart and /checkout (etc) ##

    ## set to either 1/0 to skip fastcgi cache by default ##
    set $skip_cache @FCGI_CACHE;
    
    ## post requests should always skip the cache
    if ($request_method = POST) {
        set $skip_cache 1;
    }
    
    ## query strings should always skip the cache
    if ($query_string != "") {
        set $skip_cache 1;
    }
    
    ## ENGLISH - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/account.*|/cart.*|/checkout.*|/contact.*|/dashboard.*|/login.*|/my-.*|/order.*|/profile.*|/register.*|/settings.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
        set $skip_cache 1;
    }

    ## GERMAN - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/konto.*|/warenkorb.*|/kasse.*|/kontakt.*|/dashboard.*|/anmelden.*|/mein-.*|/bestellung.*|/profil.*|/registrieren.*|/einstellungen.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
        set $skip_cache 1;
    }
    
    ## POLISH - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/konto.*|/koszyk.*|/zamowienie.*|/kontakt.*|/dashboard.*|/login.*|/moje-.*|/zamowienie.*|/profil.*|/register.*|/ustawienia.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
    	set $skip_cache 1;
    }
    
    ## do not cache RSS feeds or sitemaps (special 5 minute cache rule or something would be better in the future) ##
    if ($request_uri ~* "/feed/|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }
    
    ## certain cookies (logged in users or recent commenters etc) should always skip the cache
    if ($http_cookie ~* "wordpress_logged_in|wp-postpass|woocommerce_items_in_cart|woocommerce_cart_hash|comment_author") {
        set $skip_cache 1;
    }
    
    ## woocommerce cart actions should always skip the cache
    # if ($arg_add-to-cart != "") {
    #    set $skip_cache 1;
    # }
    
    ## woocommerce shoppers should always skip the cache
    # if ($http_cookie ~* "cookie_woocommerce_items_in_cart") {
    #    set $skip_cache 1;
    # }
    
    ## woocommerce shoppers should always skip the cache
    # if ($cookie_woocommerce_items_in_cart != "0") {
    #    set $skip_cache 1;
    # }

####################################################################################################
#### Server Block (Staging): PHP-FPM Routing #######################################################
####################################################################################################

## here are the critical settings that allow Nginx and PHP to work together via FCGI ##
## we also have to optimize cookies here too since working with WordPress ##

location ~* \.php$ {

limit_req zone=php_second burst=1 nodelay;
limit_req zone=php_minute burst=3 nodelay;

set $rt_session "";
if ($http_cookie ~* "wp_woocommerce_session_[^=]*=([^%]+)%7C") {
	set $rt_session wp_woocommerce_session_$1;
}
if ($skip_cache = 0 ) {
	more_clear_headers "Set-Cookie*";
	set $rt_session "";
}
include /etc/nginx/fastcgi.conf;
# try_files $uri =404;
try_files $uri $uri/ /index.php?$args;
fastcgi_split_path_info ^(.+\.php)(/.+)$;
fastcgi_pass 127.0.0.1:9000;
fastcgi_read_timeout 300;
fastcgi_index index.php;
fastcgi_cache WORDPRESS;
fastcgi_cache_valid 200 301 404 @CACHEVALID;
fastcgi_cache_bypass $skip_cache;
fastcgi_no_cache $skip_cache;

more_set_headers "X-Robots-Tag $robots";
set $cachecontrol "nocache"; ## disable browser caching for dynamic pages

## set-cookie on PHP content ##
set $setcookie "Path=/; HttpOnly; Secure";
}

####################################################################################################
#### Server Block (Staging): Rate Limit WP-Login.php ###############################################
####################################################################################################

## because of goofy Nginx we must reinclude all PHP directives here as they exist above ##
## next we enable rate-limiting to prevent automated brute force hack attempts ##

location = /wp-login.php {

	limit_req zone=wplogin_second burst=1 nodelay;
	limit_req zone=wplogin_minute burst=3 nodelay;

	include /etc/nginx/fastcgi.conf;
	try_files $uri =404;
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	fastcgi_pass 127.0.0.1:9000;
	fastcgi_read_timeout 300;
	fastcgi_index index.php;
	fastcgi_cache WORDPRESS;
	fastcgi_cache_valid 200 301 404 @CACHEVALID;
	fastcgi_cache_bypass $skip_cache;
	fastcgi_no_cache $skip_cache;
}

####################################################################################################
#### I. Server Block (Staging): Adminer Script #####################################################
####################################################################################################

## this snippet allows you to load Adminer via the frontend (requires PHP-FPM routing) ##
## we include some basic rate limiting rules to avoid attacks on these URLs ##

location ^~ /adminer {

	limit_req zone=adminer burst=1 nodelay;

	alias /var/www/meta/adminer.php;
	include /etc/nginx/fastcgi.conf;
	try_files $uri =404;
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	fastcgi_pass 127.0.0.1:9000;
	fastcgi_read_timeout 300;
	fastcgi_index index.php;
	fastcgi_cache off;
}

####################################################################################################
#### Server Block (Staging): HTML Files ############################################################
####################################################################################################

## because some websites mix WordPress with other static .html files we include this ##
## in case .html files are missing they will be redirected to WordPress here ##

location ~* \.(html)$ {
	try_files $uri $uri/ /index.php?$args;
	set $cachecontrol "public, max-age=691200"; ## 1 week
	set $setcookie "";
}

####################################################################################################
#### Server Block (Staging): Static Files ##########################################################
####################################################################################################

## this snippet controls expiration headers and any other settings for static assets ##
## keep in mind that Cloudflare or CDNs will likely overwrite these settings ##

location ~* \.(atom|bmp|bz2|css|doc|docx|eot|gif|gz|ico|jpeg|jpg|js|mid|midi|mp4|ogg|ogv|otf|png|ppt|rar|rss|rtf|svg|svgz|tar|tgz|ttc|ttf|wav|webp|woff|woff2|xls|zip)$ {
	set $cachecontrol "public, max-age=2628000"; ## 1 month
	set $setcookie "";
}

####################################################################################################
#### Server Block (Staging): Browser Asset Rendering ###############################################
####################################################################################################

## avoids render security errors for cross-origin in certain browsers e.g. Firefox/IE ##
## this pretty much tells browsers to stop being paranoid and load your fonts ##

location ~* \.(css|eot|js|otf|svg|ttc|ttf|woff|woff2)$ {
	add_header Access-Control-Allow-Origin "*";
}

####################################################################################################
#### Server Block (Staging): Favicon Files #########################################################
####################################################################################################

## the favicon file is annoying and old-fashioned but still something we must optimize ##
## issuing a 204 error is better (and faster) than a 404 error if not found ##

location = /favicon.ico {
	try_files $uri =204;
}
    
####################################################################################################
#### Server Block (Staging): Physical or Virtual Robots.txt ########################################
####################################################################################################

## messing up robots.txt rules is one of the most common issues with WordPress sites ##
## in most cases it should be near-empty (noindex meta tags usually better) ##

location = /robots.txt {
	try_files $uri $uri/ /index.php?$args;
	allow all;
}

####################################################################################################
#### Server Block (Staging): Physical or Virtual Ads.txt ###########################################
####################################################################################################

## just like robots.txt the ads.txt file can be generated using WordPress plugins ##
## virtual ones can be easier to manage/migrate but also more code bloat ##

location = /ads.txt {
	try_files $uri $uri/ /index.php?$args;
	allow all;
}

####################################################################################################
#### Server Block (Staging): Git Configuration #####################################################
####################################################################################################

location = /.git/config {
    deny all;
}

####################################################################################################
#### Server Block (Staging): Deny Access To Certain WordPress Files ################################
####################################################################################################

## block install script ##
location = /wp-admin/install.php {
	deny all;
}
	
## wordpress directories ##
location ~* /(?:wp-includes|wp-content|mu-plugins|uploads)/.*\.php$ {
    deny all;
}
    
## WP meta files ##
location ~* (license|licence|readme)\.(htm|html|txt) {
	deny all;
}

## wp-admin concatenation ##
location = /wp-admin/load-scripts.php {
    deny all;
}

## wp-admin concatenation ##
location = /wp-admin/load-styles.php {
    deny all;
}

## wp-config ##
location ~ /wp-config*.php {
	deny all;
}

## XML-RPC ##
location = /xmlrpc.php {
	deny all;
}

## wp-mail ##
location = /wp-mail.php {
	deny all;
}

## wp-links-opml ##
location = /wp-links-opml.php {
	deny all;
}

## wp-trackback ##
location = /wp-trackback.php {
	deny all;
}

## WP debug logs ##
location ~ /wp-content/debug\.log {
	deny all;
}

####################################################################################################
#### Server Block (Staging): Deny Access To Certain SlickStack Files ###############################
####################################################################################################

## here we deny frontend access to certain sensitive files that are part of SlickStack ##
## this provides extra security and prevents snooping into your configuration ##

## object-cache.php ##
location = /wp-content/object-cache.php {
	deny all;
}
    
## blacklist.txt ##
location = /wp-content/blacklist.txt {
	deny all;
}

## functions.php ##
location = /wp-content/functions.php {
	deny all;
}

## xxx-common.php ##
location = /wp-content/mu-plugins/xxx-common.php {
	deny all;
}

####################################################################################################
#### Server Block: Custom Settings For Popular Third-Party WordPress Plugins #######################
####################################################################################################
    
## Easy Digital Downloads ##
location ~ ^/wp-content/uploads/edd/(.*?)\.zip$ {
    rewrite / permanent;
}

    
## DO NOT REMOVE THIS CURLY BRACKET ᕦ⊙෴⊙ᕤ ##
}

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://unix.stackexchange.com/questions/91774/performance-of-unix-sockets-vs-tcp-ports
## Ref: https://stackoverflow.com/questions/257433/postgresql-unix-domain-sockets-vs-tcp-sockets/257479
## Ref: https://stackoverflow.com/questions/42704763/what-are-the-differences-from-running-php-fpm-over-an-unix-socket-vs-a-tcp-ip-so
## Ref: https://www.lowendtalk.com/discussion/7289/nginx-php-fpm-unix-socket-or-tcp-ip-for-fastcgi-pass
## Ref: https://blog.tylerbuchea.com/nginx-lets-encrypt-certbot-manual-installation/
## Ref: https://ncona.com/2017/01/free-https-with-lets-encrypt/
## Ref: https://certbot.eff.org/docs/using.html
## Ref: https://advancedweb.hu/2018/06/05/letsencrypt_webroot_vs_standalone/
## Ref: https://wp-staging.com/docs/activate-permalinks-staging-site/
## Ref: https://stackoverflow.com/questions/21687288/nginx-redirect-loop-remove-index-php-from-url/21813759#21813759
## Ref: https://serversforhackers.com/c/php-fpm-configuration-the-listen-directive
## Ref: https://easyengine.io/tutorials/php/fpm-sysctl-tweaking/
## Ref: https://support.cloudflare.com/hc/en-us/articles/214534978-Are-the-HTTP-2-or-SPDY-protocols-supported-between-Cloudflare-and-the-origin-server-
## Ref: https://blog.cloudflare.com/experiment-with-http-3-using-nginx-and-quiche/
## Ref: https://blog.cloudflare.com/http-2-prioritization-with-nginx/
## Ref: https://wordpress.org/support/topic/contact-form-7-wp-json-404-error/
## Ref: https://wordpress.stackexchange.com/questions/306033/rewrite-rest-route-link-to-wp-json-without-changing-default-permalink-stru
## Ref: https://stackoverflow.com/questions/30379940/how-do-i-get-the-wordpress-json-api-to-work-on-nginx-server
## Ref: https://community.letsencrypt.org/t/letsencrypt-webroot-verification-follows-http-to-https-redirect-for-self-signed-cert/19917
## Ref: https://letsencrypt.org/docs/challenge-types/
## Ref: https://www.techcoil.com/blog/understanding-the-difference-between-the-root-and-alias-directives-in-nginx/
## Ref: https://serverfault.com/questions/397421/phpmyadmin-location-for-nginx
## Ref: https://serverfault.com/questions/748634/how-to-alias-directories-in-nginx
## Ref: https://stackoverflow.com/questions/35320674/how-can-i-have-same-rule-for-two-locations-in-nginx-config
## Ref: https://stackoverflow.com/questions/22224441/nginx-redirect-all-requests-from-subdirectory-to-another-subdirectory-root
## Ref: https://www.digitalocean.com/community/questions/redirect-any-and-all-traffic-to-a-folder-to-another-url
## Ref: https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias
## Ref: https://www.peterbe.com/plog/be-very-careful-with-your-add_header-in-nginx
## Ref: https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms
## Ref: https://www.keycdn.com/support/nginx-location-directive
## Ref: https://community.easyengine.io/t/caching-of-feeds/868
## Ref: https://stackoverflow.com/questions/2010677/nginx-and-auth-basic
## Ref: https://www.digitalocean.com/community/tutorials/how-to-set-up-password-authentication-with-nginx-on-ubuntu-14-04
## Ref: https://serverfault.com/questions/290428/nginx-basic-auth-timeout
## Ref: https://www.tecmint.com/setup-nginx-basic-http-authentication/
## Ref: https://ubiq.co/tech-blog/how-to-configure-basic-authentication-in-nginx/
## Ref: https://stackoverflow.com/questions/32104731/directive-inheritance-in-nested-location-blocks
## Ref: https://stackoverflow.com/questions/41780200/nginx-location-vs-location

## SS_EOF
